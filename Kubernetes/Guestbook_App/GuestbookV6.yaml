# Service für frontend
apiVersion: v1
kind: Service
metadata:
  name: frontend-service-v6
spec:
  type: NodePort
  selector:
    app: guestbook_app
    tier: frontend
    version: v6
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30030  # port-forward service/frontend-service-v6 [Port-Laptop]:[Port-Container] 8080:30030
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: guestbookapp-v6
  labels:
    version: gesamte-version-v6
    tier: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      tier: frontend
      app: guestbook_app
      version: v6
  template:
    metadata:
      labels:
        tier: frontend
        app: guestbook_app
        version: v6
    spec:
      serviceAccountName: serviceaccountgb # Serviceaccount Hinzugefügt.
      containers:
      - name: guestbook 
        image: 172.17.0.1:5000/v6-nhe # Non-Root Nginx image verwenden.
        ports:
        - containerPort: 8080  # Mit diesem Image muss der Container auf Port 8080 laufen anstatt 80.

        # Resource Requirements
        resources:
          requests:
            cpu: 0.25 
            memory: 500Mi
          limits:
            cpu: 0.5
            memory: 1Gi

        # Enviroment Variabeln hinzugefügt
        env:
        - name: Guestbook
          value: Das ist die Guestbook version mit allen Aufträgen in einem.
        - name: Status
          value: Die Enviroment Variable funktioniert 
        
        # Enviroment Variabel von Secret hinzufügen
        - name: Secret
          valueFrom:
            secretKeyRef:
              name: secret-guestbook
              key: SecretEnv

        # Alle Capabilities werden entfernt
        securityContext:
          runAsNonRoot: true
          capabilities:
            drop: ["ALL"]
  
        # ConfigMap wird gemounted
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html # Pfad musste angepasst werden
          readOnly: false
        
        # LivenessProbe hinzufügen
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 3

        # Readiness Probes hinzufügen
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10

        # Startup Probe Hinzufügen
        startupProbe:
          httpGet: 
            path: /
            port: 8080
          failureThreshold: 15
          periodSeconds: 10
         
      # Init Container hinzufügen
      initContainers:
      - name: redis-test
        image: redis:alpine
        command: ['sh', '-c', 'redis-cli -h redis-service -p 6000 ping | grep PONG']

      # Configmap mounten    
      volumes:
      - name: html
        configMap:
          name: html-configmap
        